// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package boot

import (
	"dongo_game_server/src/config"
	"dongo_game_server/src/grpc"
	"dongo_game_server/src/support"
	"dongo_game_server/src/web"
	"dongo_game_server/src/web/controller"
	"dongo_game_server/src/web/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitWeb() (*web.WebApp, error) {
	configConfig := config.DefaultConfig()
	userServiceClient := config.DefaultUserServiceRpc(configConfig)
	baseHdl := &controller.BaseHdl{}
	captchaHdl := &controller.CaptchaHdl{}
	db := config.NewDatabaseWeb(configConfig)
	managerService := &service.ManagerService{
		DB: db,
	}
	managerHdl := &controller.ManagerHdl{
		Service: managerService,
	}
	projectService := &service.ProjectService{
		DB: db,
	}
	projectHdl := &controller.ProjectHdl{
		Service: projectService,
	}
	resourceHdl := &controller.ResourceHdl{
		DB: db,
	}
	emailConfig := config.DefaultEmailConfig(configConfig)
	toolHdl := &controller.ToolHdl{
		DB:    db,
		Email: emailConfig,
	}
	trackHdl := &controller.TrackHdl{
		DB: db,
	}
	managerPathService := &service.ManagerPathService{
		DB: db,
	}
	managerPathHdl := &controller.ManagerPathHdl{
		Service: managerPathService,
	}
	clientService := &service.ClientService{
		DB: db,
	}
	clientHdl := &controller.ClientHdl{
		Service: clientService,
	}
	rpcHdl := &controller.RpcHdl{
		UserService: userServiceClient,
	}
	socketService := &service.SocketService{
		DB: db,
	}
	socketHdl := &controller.SocketHdl{
		Service: socketService,
		Project: projectService,
	}
	fakeHdl := &controller.FakeHdl{}
	webApp := &web.WebApp{
		Config:      configConfig,
		UserService: userServiceClient,
		Base:        baseHdl,
		Captcha:     captchaHdl,
		Manager:     managerHdl,
		Project:     projectHdl,
		Resource:    resourceHdl,
		Tool:        toolHdl,
		Track:       trackHdl,
		ManagerPath: managerPathHdl,
		Client:      clientHdl,
		RPC:         rpcHdl,
		Socket:      socketHdl,
		Fake:        fakeHdl,
	}
	return webApp, nil
}

func InitRpc() (*grpc.RpcApp, error) {
	configConfig := config.DefaultConfig()
	db := config.NewDatabaseRpc(configConfig)
	rpcConfig := config.DefaultRpcConfig(configConfig)
	rpcApp := &grpc.RpcApp{
		DB:     db,
		Config: rpcConfig,
	}
	return rpcApp, nil
}

func InitSupport() (*support.SupportApp, error) {
	configConfig := config.DefaultConfig()
	userServiceClient := config.DefaultUserServiceRpc(configConfig)
	db := config.NewDatabaseWeb(configConfig)
	supportApp := &support.SupportApp{
		Config:      configConfig,
		UserService: userServiceClient,
		DB:          db,
	}
	return supportApp, nil
}

// wire.go:

var configSet = wire.NewSet(config.DefaultConfig, config.DefaultEmailConfig, config.DefaultRpcConfig, config.DefaultUserServiceRpc, config.DefaultMemory)

var webSet = wire.NewSet(wire.Struct(new(controller.BaseHdl), "*"), wire.Struct(new(controller.CaptchaHdl), "*"), wire.Struct(new(controller.ManagerHdl), "*"), wire.Struct(new(controller.ProjectHdl), "*"), wire.Struct(new(controller.ResourceHdl), "*"), wire.Struct(new(controller.RpcHdl), "*"), wire.Struct(new(controller.SocketHdl), "*"), wire.Struct(new(controller.ToolHdl), "*"), wire.Struct(new(controller.TrackHdl), "*"), wire.Struct(new(controller.ManagerPathHdl), "*"), wire.Struct(new(controller.FakeHdl), "*"), wire.Struct(new(controller.ClientHdl), "*"), wire.Struct(new(service.ManagerService), "*"), wire.Struct(new(service.SocketService), "*"), wire.Struct(new(service.ProjectService), "*"), wire.Struct(new(service.ManagerPathService), "*"), wire.Struct(new(service.ClientService), "*"))
